---
import { formatDate } from '~/lib/date'
import type { ThoughtPostSummary } from '~/lib/thoughts'
import Link from './Link.astro'
import Tags from './Tags.astro'

interface Props {
	thought: ThoughtPostSummary
	class?: string
	showReadMore?: boolean
	highlightedTag?: string
	variant?: 'default' | 'compact'
	dateFormat?: 'default' | 'short'
}

const {
	thought,
	class: className = '',
	showReadMore = false,
	highlightedTag,
	variant = 'default',
	dateFormat = 'default',
} = Astro.props

const isCompact = variant === 'compact'
const headingClass = isCompact
	? 'font-medium mb-2'
	: 'text-xl font-semibold text-neutral-900 dark:text-white mb-2'
const timeClass = isCompact
	? 'text-sm text-gray-400'
	: 'text-sm text-neutral-500 dark:text-neutral-400'
---

<article class={className}>
	<header class={showReadMore ? 'mb-3' : 'mb-2'}>
		{
			isCompact ? (
				<h3 class={headingClass}>
					<Link
						href={`/thoughts/${thought.year}/${thought.slug}`}
						variant="default"
						style={{
							viewTransitionName: `thought-title-${thought.slug}`,
						}}
					>
						{thought.title}
					</Link>
				</h3>
			) : (
				<h2 class={headingClass}>
					<Link
						href={`/thoughts/${thought.year}/${thought.slug}`}
						variant="default"
						style={{
							viewTransitionName: `thought-title-${thought.slug}`,
						}}
					>
						{thought.title}
					</Link>
				</h2>
			)
		}
		<div class="flex items-center gap-2">
			<time
				datetime={thought.dateCreated.toISOString()}
				class={timeClass}
				style={{ viewTransitionName: `thought-date-${thought.slug}` }}
			>
				{
					formatDate(
						thought.dateCreated,
						dateFormat === 'short' ? 'short' : undefined,
					)
				}
			</time>
			{
				thought.draft && !import.meta.env.PROD && (
					<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300">
						Draft
					</span>
				)
			}
		</div>
	</header>

	{/* Tags */}
	{
		thought.tags &&
			thought.tags.length > 0 &&
			(isCompact ? (
				<Tags
					tags={thought.tags}
					class="mt-2"
					style={{ viewTransitionName: `thought-tags-${thought.slug}` }}
				/>
			) : (
				<div
					class="flex flex-wrap gap-2 my-3"
					style={{ viewTransitionName: `thought-tags-${thought.slug}` }}
				>
					{thought.tags.map((tag: string) => (
						<Link
							href={`/thoughts/tags/${encodeURIComponent(tag.toLowerCase())}`}
							variant="tag"
							class={
								highlightedTag &&
								tag.toLowerCase() === highlightedTag.toLowerCase()
									? 'bg-emerald-200 dark:bg-emerald-800 text-emerald-900 dark:text-emerald-100'
									: undefined
							}
						>
							{tag}
						</Link>
					))}
				</div>
			))
	}
</article>
